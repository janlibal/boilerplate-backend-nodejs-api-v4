{
    "swagger": "2.0",
    "info": {
        "description": "Boilerplate API is a simple RESTful API boilerplate project built using Node.Js, Koa, Swagger, TypeScript and Objection as ORM for a Postres database.",
        "version": "4.0.0",
        "title": "Boilerplate v4",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "jan.libal@yahoo.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "host": "localhost:3000",
    "basePath": "",
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "getApiInfo"
                ],
                "summary": "Gets API info",
                "description": "Returns name, version, desc, nnodever, hostname and platform.",
                "operationId": "getApiInfo",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/api/v1/login": {
            "post": {
                "tags": [
                    "login"
                ],
                "summary": "Logs user into the app",
                "description": "Logs in a  registered user",
                "operationId": "loginUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Login",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "X-Expires-After": {
                                "type": "string",
                                "format": "date-time",
                                "description": "date in UTC when token expires"
                            },
                            "X-Rate-Limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "calls per hour allowed by the user"
                            }
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401":{
                        "description": "Invalid email or password"
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
                
            }
        },
        "/api/v1/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Registers and logs in new user",
                "description": "Registers a new user and logs them in",
                "operationId": "registerUser",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Register and login",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Register"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "headers": {
                            "X-Expires-After": {
                                "type": "string",
                                "format": "date-time",
                                "description": "date in UTC when token expires"
                            },
                            "X-Rate-Limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "calls per hour allowed by the user"
                            }
                        },
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401":{
                        "description": "Invalid email or password"
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    },
                    "409":{
                        "description": "User already registered"
                    }
                }
                
            }
        },
        "/api/v1/address": {
            "post": {
                "tags": [
                    "address"
                ],
                "summary": "Add a new contact into the addressbook",
                "description": "",
                "operationId": "addContact",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Address object that needs to be added to Firestore",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Address"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    },
                    "401": {
                        "description": "Unauthorized. The username or password provided is incorrect."
                    }
                },
                "security": [{ "Bearer": [] }]
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
          "type": "apiKey",
          "name": "Authorization",
          "in": "header",
          "description": "Enter your bearer token in the format **Bearer &lt;token>**"
        }
      }, 
    "definitions": {
        "ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Login": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Login"
            }
        },
        "Register": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Login"
            }
        },
        "Address": {
            "type": "object",
            "required": [
                "firstName",
                "lastName",
                "phoneNo",
                "address"
            ],
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "phoneNo": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Address"
            }
        }
    }
}

